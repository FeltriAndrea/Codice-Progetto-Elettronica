// Librerie
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>

// Definizione display
#define SCREEN_WIDTH 128  // Larghezza in pixels
#define SCREEN_HEIGHT 64  // Altezza in pixels
#define OLED_RESET 4
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Codice pixel per i loghi
const unsigned char its[] PROGMEM = {
  0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe0, 0x00, 0x01, 0xf3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0x00, 0x03, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xfe, 0x00, 0x03, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xef, 0xff, 0xc7, 0x00, 0x30, 0xff, 0xf0, 0x00, 0x73, 0x66, 0x7c, 0x8d, 0xf0, 0x00, 0x00, 0x00,
  0xc1, 0xff, 0xc6, 0x00, 0x18, 0xff, 0xf8, 0x00, 0x73, 0x66, 0xc6, 0xcd, 0x80, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x06, 0x00, 0x18, 0x00, 0x38, 0x00, 0x7b, 0x66, 0xc6, 0xd9, 0xf0, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x06, 0x00, 0x18, 0x00, 0x18, 0x00, 0x6f, 0x66, 0xc6, 0x79, 0xf0, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x06, 0x00, 0x18, 0x00, 0x1c, 0x00, 0x67, 0x66, 0xc6, 0x71, 0x80, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x06, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x67, 0x3c, 0x7c, 0x71, 0xf0, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x07, 0x00, 0x30, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc7, 0xfe, 0x03, 0x80, 0x70, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc3, 0xfe, 0x01, 0xc1, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x01, 0x80, 0x03, 0x00, 0x18, 0x18, 0x00,
  0xc0, 0x00, 0x00, 0xff, 0xc0, 0x03, 0x1c, 0x00, 0x7d, 0xf3, 0xee, 0x4f, 0xc8, 0x7e, 0x7c, 0x9f,
  0xc0, 0x00, 0x00, 0x7f, 0x00, 0x03, 0x1c, 0x00, 0x19, 0x86, 0x2e, 0x48, 0xc8, 0x66, 0xc0, 0x90,
  0xc0, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x1c, 0x00, 0x11, 0xf6, 0x0f, 0x58, 0x48, 0xc3, 0xcc, 0x9f,
  0xc0, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x1c, 0x00, 0x11, 0xc6, 0x0d, 0xd8, 0x48, 0xc2, 0xcc, 0x98,
  0xc0, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0e, 0x00, 0x11, 0x87, 0x6c, 0xcc, 0xcc, 0x66, 0x6c, 0x98,
  0xc7, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0f, 0x00, 0x11, 0xf3, 0xcc, 0xc7, 0x8f, 0x3c, 0x7c, 0x9f,
  0xc7, 0xfe, 0x03, 0x0c, 0x01, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc1, 0xfe, 0x03, 0x0c, 0x03, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x03, 0x0c, 0x07, 0x00, 0x0e, 0x00, 0x38, 0x79, 0x08, 0x18, 0x10, 0x97, 0xcc, 0x00,
  0xc0, 0x00, 0x03, 0x0c, 0x0e, 0x00, 0x1c, 0x00, 0x7e, 0x7d, 0x0c, 0x1c, 0x19, 0xb7, 0xce, 0x00,
  0xc0, 0x00, 0x03, 0x0c, 0x1c, 0x00, 0x1c, 0x00, 0x63, 0x41, 0x0c, 0x1c, 0x19, 0xb1, 0x1e, 0x00,
  0xc0, 0x00, 0x03, 0x0c, 0x38, 0x00, 0x1c, 0x00, 0x63, 0x7d, 0x0c, 0x36, 0x09, 0x31, 0x1a, 0x00,
  0xc0, 0x00, 0x03, 0x0c, 0x70, 0x00, 0x1c, 0x00, 0x63, 0x61, 0x0c, 0x36, 0x0f, 0x31, 0x1b, 0x00,
  0xc7, 0xfe, 0x03, 0x0c, 0x60, 0x00, 0x1c, 0x00, 0x66, 0x61, 0x8c, 0x7e, 0x0f, 0x31, 0x3f, 0x00,
  0xc3, 0xfe, 0x03, 0x0c, 0x60, 0x00, 0x1c, 0x00, 0x7c, 0x7d, 0xef, 0xe3, 0x06, 0x31, 0x31, 0x80,
  0xc0, 0x00, 0x03, 0x0c, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x03, 0x0c, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x03, 0x0c, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe0, 0x00, 0x03, 0x0c, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x00, 0x03, 0x0c, 0x60, 0x00, 0x18, 0x00, 0x38, 0x7b, 0x09, 0xc9, 0xcd, 0xaa, 0x00, 0x00,
  0x3f, 0x80, 0x03, 0x0c, 0x60, 0x00, 0x78, 0x00, 0x38, 0x53, 0x15, 0x15, 0x2d, 0xe6, 0x00, 0x00,
  0x0f, 0xff, 0xe3, 0x0c, 0x61, 0xff, 0xf0, 0x00, 0x38, 0x51, 0x9d, 0x1d, 0x69, 0xe4, 0x00, 0x00,
  0x01, 0xff, 0xc3, 0x0c, 0x61, 0xff, 0xe0, 0x00, 0x38, 0x13, 0x10, 0xd3, 0xcd, 0x00, 0x00, 0x00
};
const unsigned char more[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xf8, 0x03, 0xf8, 0x7f, 0xfc, 0x07, 0xfe, 0xf3, 0x9e, 0x1f, 0xfd, 0xff, 0xe0, 0x3f, 0xf8,
  0x07, 0xfe, 0x0f, 0xfc, 0x7f, 0xfe, 0x1f, 0xfe, 0xf7, 0x9e, 0x3f, 0xfd, 0xff, 0xf0, 0x7f, 0xf8,
  0x0f, 0xff, 0x1f, 0xfe, 0x7f, 0xfe, 0x3f, 0xfe, 0xf7, 0x9e, 0x7f, 0xfd, 0xff, 0xf8, 0xff, 0xf8,
  0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x0f, 0x3c, 0x00, 0xf7, 0x9e, 0xf8, 0x1c, 0x00, 0x79, 0xf0, 0x00,
  0x1e, 0x07, 0xbc, 0x0f, 0x00, 0x0f, 0x78, 0x00, 0xf7, 0x9e, 0xf0, 0x1c, 0x00, 0x3d, 0xe0, 0x00,
  0x1c, 0x07, 0xbc, 0x07, 0x00, 0x0f, 0x78, 0xfe, 0xf7, 0x9f, 0xe0, 0x1c, 0x00, 0x3f, 0xc7, 0xf8,
  0x3c, 0x67, 0xbc, 0x07, 0xbf, 0xff, 0x71, 0xfe, 0xf7, 0x9f, 0xe0, 0x1d, 0xff, 0xfb, 0xc7, 0xf8,
  0x3c, 0xf3, 0xbc, 0x07, 0xff, 0xfe, 0x71, 0xfe, 0xf3, 0x9f, 0xe0, 0x1d, 0xff, 0xfb, 0xc7, 0xf8,
  0x3c, 0xf3, 0xbc, 0x07, 0x7f, 0xfc, 0x78, 0xfe, 0xf0, 0x1f, 0xe0, 0x1d, 0xff, 0xf3, 0xc7, 0xf8,
  0x3c, 0xf3, 0xbc, 0x0f, 0x7f, 0xfc, 0x78, 0x00, 0xf0, 0x3c, 0xf0, 0x1d, 0xff, 0xe1, 0xe0, 0x00,
  0x3c, 0xf3, 0x9f, 0x1f, 0x00, 0x3c, 0x7c, 0x00, 0x7c, 0x7c, 0xf8, 0x1c, 0x01, 0xf1, 0xf0, 0x00,
  0x3c, 0xf3, 0x9f, 0xfe, 0x00, 0x1e, 0x3f, 0xfe, 0x3f, 0xf8, 0x7f, 0xdc, 0x00, 0xf0, 0xff, 0xf8,
  0x3c, 0xf3, 0x8f, 0xfc, 0x00, 0x1e, 0x1f, 0xfe, 0x3f, 0xf0, 0x3f, 0xdc, 0x00, 0x70, 0x7f, 0xf8,
  0x3c, 0xf3, 0x83, 0xf8, 0x00, 0x1e, 0x07, 0xfe, 0x0f, 0xe0, 0x1f, 0xdc, 0x00, 0x70, 0x3f, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char az[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xf8, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0x38, 0x00, 0x00, 0x38, 0x0f, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe0, 0x38, 0x00, 0x00, 0x38, 0x07, 0x07, 0xf8, 0xf1, 0xc6, 0x01, 0x87, 0xf0, 0x1f, 0xcc, 0x03,
  0xe0, 0x38, 0x00, 0x00, 0x38, 0x03, 0x9f, 0xfc, 0xf1, 0xce, 0x03, 0x9f, 0xfc, 0x7f, 0xce, 0x07,
  0xe0, 0x38, 0x00, 0x00, 0x38, 0x03, 0x9f, 0xfe, 0xf1, 0xce, 0x03, 0xbf, 0xfe, 0x7f, 0xce, 0x07,
  0xff, 0xff, 0xf1, 0xfe, 0x38, 0x03, 0x9c, 0x0e, 0xf1, 0xce, 0x07, 0xbc, 0x1e, 0xf0, 0x0e, 0x07,
  0xff, 0xff, 0xfb, 0xff, 0x38, 0x03, 0x9c, 0x0e, 0xf1, 0xce, 0x07, 0x38, 0x0e, 0xe0, 0x0e, 0x07,
  0xff, 0xff, 0xfb, 0xff, 0x38, 0x03, 0x9f, 0xfe, 0xf1, 0xce, 0x0e, 0x3b, 0xfe, 0xe0, 0x0e, 0x07,
  0xe0, 0x38, 0xf0, 0x00, 0x38, 0x03, 0x9f, 0xfc, 0xf1, 0xce, 0x1e, 0x3b, 0xfc, 0xe0, 0x0e, 0x07,
  0xe0, 0x38, 0xe0, 0x00, 0x38, 0x07, 0x9f, 0xf8, 0xf1, 0xce, 0x3c, 0x3b, 0xf8, 0xe0, 0x0e, 0x07,
  0xe0, 0x39, 0xe0, 0x00, 0x38, 0x0f, 0x1c, 0x00, 0xf9, 0xce, 0xf8, 0x3c, 0x00, 0xe0, 0x0e, 0x07,
  0x00, 0x03, 0xc0, 0x00, 0x3f, 0xff, 0x1f, 0xe0, 0x7d, 0xcf, 0xf0, 0x3f, 0xe0, 0xe0, 0x0f, 0xff,
  0x00, 0x07, 0x80, 0x00, 0x3f, 0xfc, 0x1f, 0xe0, 0x7d, 0xcf, 0xe0, 0x1f, 0xe0, 0xe0, 0x07, 0xff,
  0x00, 0x0f, 0x00, 0x00, 0x1f, 0xf0, 0x07, 0xe0, 0x18, 0xc7, 0x00, 0x07, 0xe0, 0x60, 0x03, 0xf7,
  0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff,
  0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe
};

// Librerie DHT
#include "DHT.h"
#define DHTPIN 2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// Funzioni
void set_oled();
void loop_DHT();
void loop_water_level();

// Variabili per il sensore del liv acqua
int pinWater = A2;
int HistoryValue = 0;
char printbuffer[128];

//Pin ventole
int pinVentoleSotto = 12;
int pinVentolaSopra = 10;

//Pin fotoresistore centro
int pinFotoresistore = A0;

//Pin pompa acqua
int pinPompaAcqua = 9;

// Void Setup
void setup() {
  set_oled();
  pinMode(pinVentoleSotto, OUTPUT);
  pinMode(pinVentolaSopra, OUTPUT);
  pinMode(pinFotoresistore, INPUT);
  pinMode(pinPompaAcqua, OUTPUT);
}

// Void Loop
void loop() {
  digitalWrite(pinVentoleSotto, HIGH);
  loop_DHT();
  delay(1000);
  // Se la temperatura è sopra i 22 gradi parte la ventola sopra 
  float temperatura = dht.readTemperature();
  if (temperatura > 22) {
    digitalWrite(pinVentolaSopra, HIGH);
  } else {
    digitalWrite(pinVentolaSopra, LOW);
  }
  delay(1000);
  loop_water();
  delay(1000);
  // Se il fotoresistore centrale è coperto e il valore terra è sopra 20 e sotto 100 attiva la pompa al pin 9 per ... secondi
  int valoreTerreno = analogRead(pinWater);
  int valoreFotoresistore = analogRead(pinFotoresistore);
  if (valoreFotoresistore < 20 && (valoreTerreno > 10 && valoreTerreno < 100)) { 
    delay(20000);
    digitalWrite(pinPompaAcqua, HIGH);
    delay(3000);
    digitalWrite(pinPompaAcqua, LOW);
  }
}

// Funzione per stampare i nomi e iloghi iniziali
void set_oled() {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();

  // Nome prototipo e nomi creatori
  display.setTextSize(2);       // Dimensione testo
  display.setTextColor(1, 0);   // Colore Testo
  display.setCursor(30,12);    // Dove inizia a scrivere
  display.println("Serra");  // Frase di stampa
  display.println("Automatica");
  display.display();            // Scrive sullo schermo
  delay(3500);
  // Pulisce lo schermo e lo ristampa pulito
  display.clearDisplay();
  display.display();
  display.setTextColor(1, 0);   // Colore Testo
  display.setCursor(35,25);
  display.println("Team:");
  display.display();
  delay(3500);
  // Pulisce lo schermo e lo ristampa pulito
  display.clearDisplay();
  display.display();
  
  // dividere in 2 e mettere delay? e regolare il cursor (0,0)---->
  display.setCursor(0,0);
  display.println("Ajazi");
  display.println("Feltri");
  display.println("Pasinetti");
  display.println("Sabatini");
  display.display();
  delay(3500);
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("Saia");
  display.println("Trovesi");
  display.println("Loaiza");
  display.display();
  delay(3500);

  // Pulisce lo schermo e lo ristampa pulito
  display.clearDisplay();
  display.display();
  display.setCursor(5,25);
  display.println("Thanks to:");
  display.display();
  delay(2000);

  // Pulisce lo schermo e lo ristampa pulito
  display.clearDisplay();
  display.display();

  // Logo ITS
  display.drawBitmap(0, 15, its, 128, 37, 1);
  display.display();
  delay(3500);
  // Pulisce lo schermo e lo ristampa pulito
  display.clearDisplay();
  display.display();
  // Logo Moreware
  display.drawBitmap(0, 25, more, 128, 21, 1);
  display.display();
  delay(3500);
  // Pulisce lo schermo e lo ristampa pulito
  display.clearDisplay();
  display.display();
  // Logo AzDelivery
  display.drawBitmap(0, 25, az, 128, 21, 1);
  display.display();
  delay(3500);
  // Pulisce lo schermo e lo ristampa pulito
  display.clearDisplay();
  display.display();
  Serial.begin(9600);
  // Reset del diplay
  display.clearDisplay();
  display.display();
  // Initialize device
  dht.begin();
}

// Funzione di lettura e stampa sul display dei dati del sensore DHT
void loop_DHT() {
  //Reset del display
  display.clearDisplay();
  display.display();

  // Testo DHT test
  display.setTextSize(2);       // Dimensione testo
  display.setTextColor(1, 0);   // Colore Testo
  display.setCursor(15, 25);    // Dove inizia a scrivere
  display.println("DHT Test");  // Frase di stampa
  display.display();            // Scrive sullo schermo

  delay(2000);

  //Reset del display
  display.clearDisplay();
  display.display();

  //Set del testo
  display.setTextSize(2);
  display.setTextColor(1, 0);
  display.setCursor(15, 25);

  delay(2000);
  // Lettura valori dal sensore
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  // Controllo se i valori del sensore sono null
  if (isnan(h) || isnan(t)) {
    display.println("Failed to read from DHT sensor!");
    display.display();
    delay(2000);
    return;
  }
  //Stampa umidità e temperatura sul display
  display.setCursor(0, 0);
  display.println("Umidita': ");
  display.print(h);
  display.println("% \nTemp: ");
  display.print(t);
  display.print(" C :)");
  display.display();

  delay(5000);
}

// Funzione di lettura e stampa sul display dei dati del senosre dell'acqua
void loop_water() {

  //Reset del display
  display.clearDisplay();
  display.display();

  // Testo Water test
  display.setTextSize(2);         // Dimensione testo
  display.setTextColor(1, 0);     // Colore Testo
  display.setCursor(5, 25);       // Dove inizia a scrivere
  display.println("Water Test");  // Frase di stampa
  display.display();              // Scrive sullo schermo

  delay(2000);

  display.clearDisplay();
  display.display();

  display.setTextSize(2);
  display.setTextColor(1, 0);
  display.setCursor(5, 25);

  delay(2000);
  int value = analogRead(pinWater);
  display.print("Water: ");
  display.print(value);
  display.display();
  delay(5000);
  display.clearDisplay();
  display.display();
}
